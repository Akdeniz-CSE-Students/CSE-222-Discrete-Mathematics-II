Connectivity

Proposition Let G = (V , E) be a digraph and let u ∈ V .
Let R+ (u) be the nodes that can be reached from u
and let R− (u) be the nodes that can reach u,
then the strongly connected component of u is
C(u) = R+ (u) ∩ R− (u)
The exploration algorithm applied to the inverse graph, starting
from u finds the set R− (u)

Here R+ (v6 ) = {4, 6} while R− (v6 ) = V hence C(v6 ) = {4, 6}
Find the other connected components.

Shortest path

Shortest path problems
Find the shortest total length of a path between two nodes of a
directed graph with lengths associated with each edge.
E.g. Find the best piecewise linear approximation of a function

Pj
A cost cij = α + β k =i (f (xk ) − g(xk ))2 is associated with each
linear section. This amounts to finding the shortest path in

Shortest path

Other example : Find the best production policy for a plant with a
monthly demand di , a launching cost fi , a storage cost hi and a
unit price pi , for each period i = 1, . . . , n.
In the path below, we are e.g. producing in stages 1, 4 and 5.

A cost is associated with each section. For the path (1,4) it is e.g.
c14 = f1 + p1 (d1 + d2 + d3 ) + h1 (d2 + d3 ) + h2 (d3 ) which is the
fixed cost + the production cost in periods 1, 2 and 3 + storage
costs at the end of periods 1 and 2.
The minimization of the total cost amounts to a shortest path
problem in a graph combining paths as above.

Shortest path

Proposition If there is a shortest walk from s to t, there is also a
shortest path from s to t
Proof
Assume the walk is not a path;
hence there is a recurring node.
Eliminate the cycle between the
first and last occurrence of this
node. Repeat this procedure.
In the above graph the path (7, 8, 6, 3, 1, 5, 6, 10, 4, 6, 9) has a
cycle (6, 3, 1, 5, 6, 10, 4, 6). After its elimination we have a path
(7, 8, 6, 9).
Corollary If G does not contain cycles of negative length, the
resulting path is one of lower cost.
Proof Trivial

Shortest path

Dijkstra’s algorithm
This method is for a digraph G that has positive edge lengths.
For undirected graphs one can duplicate each edge as follows

Below, V + (u) denotes the set of children of u.
Algorithm Dijkstra(G,u)
S := {u}; d(u) := 0; d(v ) := c(u, v ) ∀v 6= u;
while S 6= V do
choose v 0 ∈
/ S : d(v 0 ) ≤ d(v ) ∀v ∈
/ S;
S := S ∪ {v 0 };
for each v ∈ V + (v 0 ) do
d(v ) = min{d(v ), d(v 0 ) + c(v 0 , v )}
end for
end while

Shortest path

Idea : Update a set S for which we know all shortest paths from u
Let us see the behavior of this
algorithm on an example.
The table below indicates the
steps and the distances
computed for each node
Iter
0
1
2
3
4

S
{u}
{u, 1}
{u, 1, 2}
{u, 1, 2, 3}
{u, 1, 2, 3, 4}

d(u) d(1) d(2)
0
1
3
0
1
2
0
1
2
0
1
2
0
1
2

d(3) d(4)
∞
6
4
6
3
6
3
5
3
5

We indicate in more detail the exploration of the graph

Shortest path

S
{u}
{u, 1}
{u, 1, 2}
{u, 1, 2, 3}
{u, 1, 2, 3, 4}

d(u)
0
0
0
0
0

d(1)
1
1
1
1
1

d(2)
3
2
2
2
2

d(3)
∞
4
3
3
3

d(4)
6
6
6
5
5

Below, the node u is blue and the explored nodes are red

Shortest path

Proposition Dijkstra’s algorithm finds in O(n2 ) time the shortest
path from u to all other nodes of V .
Proof By induction on the size of S, we show that
1. ∀v ∈ S, d(v ) is the length of the shortest path from u to v
2. ∀v ∈ S + (children of nodes of S), d(v ) is the length of the
shortest path from u to v not passing exclusively via nodes of S
Trivial for S = {u}, d(u) = 0, d(v ) = c(u, v ).
Let v 0 ∈
/ S : d(v 0 ) = minv ∈S
/ d(v ) then the
shortest path to v 0 must lie completely in S.
If not, ∃v 00 outside S at a shorter distance.
We can update S := S ∪ {v 0 } and compute the shortest path
from u to children of v 0 as d(v ) = min{d(v ), d(v 0 ) + c(v 0 , v ))}.
This gives the length of the shortest path to all v ∈ S + .
The other distances are unknown as yet and hence set to ∞.

Shortest path

Variants

For a graph with edge lengths 1 it suffices to do a BFSearch and
to keep track of the path lengths by incrementing them with 1
during the exploration phase. This is thus an O(m) time algorithm.
Algorithm ShortestPathBFS(G,v)
mark(v ); S := {v }; d(v ) = 0;
while not S = ∅ do
v := first(S)
if ∃(v , v 0 ) such that v 0 is unmarked then
choose (v , v 0 ) with v 0 of smallest index;
mark(v 0 ); S := S ∪ {v 0 }; d(v 0 ) = d(v ) + 1;
else
S := S\{v }
end if
end while

Shortest path

Proposition All nodes at distance exactly k are correctly
identified before proceeding further.
Proof For k = 0 this is trivial (S is the original node u).
Induction step : suppose the statement is correct up to k .
After all nodes at distance k have been found, one finds nodes
that are at a distance larger than k but since they are all
neighboring nodes, they must be at distance exactly k + 1.

Shortest path

For an acyclic graph, one can just compute the topological order in
O(m) time (see earlier).
To solve the shortest path problem one then uses the algorithm
Algorithm ShortestPathAcyclic(G,v)
d(1) = 0; d(i) := ∞ for i = 2, . . . , n;
for i = 1 : n − 1 do
for j ∈ V + (i) do
d(j) := minj {d(j), d(i) + c(i, j)};
end for
end for
What is the complexity of this second step ?
One can also see the shortest path problem as a flow problem or
as a linear programming problem.
This leads to other algorithms like the Bellman-Ford Algorithm.

Trees

Trees and forests
A tree is an acyclic and
connected graph

A forest is an acyclic
graph (and hence a union
of trees)

Proposition For a graph G = (V , E) of order n = |V |, the
following are equivalent
1. G is connected and has n − 1 edges
2. G is acyclic and has n − 1 edges
3. G is connected and acyclic
4. ∀u, v ∈ V there is one and only one path from u to v
5. G is acyclic and adding an edge creates one and only one cycle
6. G is connected and removing an arbitrary edge disconnects it
Proofs ?

Trees

The following definitions are especially relevant for trees.
The eccentricity ε(u) = maxv ∈V d(u, v ) of a node is the maximum
distance to any node v ∈ V . The eccentricity of each node is
indicated in the graph below

The radius rad(G) = minu∈V ε(u) of a graph G is the minimal
eccentricity of all nodes in V
The diameter diam(G) = maxu∈V ε(u) of a graph G is the maximal
eccentricity of all nodes in V . It is also the maximal distance
between any two nodes in V
The center of a graph G is the set of nodes in V of minimal
eccentricity (the black node)

Trees

A leaf of a tree T is a node of degree 1
Proposition Let T be a tree and let T 0 be the tree obtained by
removing all its leafs, then ε(T 0 ) = ε(T ) − 1 for all nodes of T 0 .
Proof ?
Proposition The center of a tree is a single node or a pair of
adjacent nodes.

Proof By induction using the previous proposition.
Show that the center does not change.

Trees

Counting trees
How many different (labeled) trees are there with n nodes ?
The following table gives the count for small n

The following theorem of Cayley gives the exact formula.
Proposition
The number of distinct labeled trees of order n equals nn−2

Trees

We construct a bijection of Tn with a sequence via the algorithm
Algorithm PrüferSequence(T)
s := (); t := ();
while |E| > 1 do
choose the leaf of smallest index i;
T := T \{i}; s := (s, i); t := (t, neighbour (i));
end while
On the graph below, it yields the table next to it

One shows that the graph can be reconstructed from the
sequence ti which are n − 2 numbers from {1, . . . , n}
and there are exactly nn−2 such sequences.

Trees

Spanning tree
Remove from a connected graph as many edges as possible while
remainig connected; this should yield a tree with n − 1 edges.
This is the minimal spanning tree problem solved by the following
algorithm, of time complexity O(m log m)
Algorithm KruskalMST(G)
Eord := sort(E); E 0 := ∅; Erest := Eord ;
while |E 0 | > n − 1 do
α := first(Erest ); Erest := Erest \{α};
if (V , E 0 ∪ {α}) is acyclic then
E 0 := E 0 ∪ {α};
end if
end while
The sorting is done efficiently
in O(m log m) time as well.
Let us look at an example

Trees

The different steps of the algorithm are

This constructs a tree which is a subgraph with n − 1 edges.

Trees

Now we look at an alternative algorithm of time complexity
O((m + n) log n)
The idea is to pick a random node and then grow a minimal tree
from there
Algorithm PrimMST(G)
Choose u ∈ V ; V 0 := {u}; E 0 := ∅;
for i = 1 : n − 1 do
E 00 := edges linking V to V 0 ;
choose e = (u, v ) ∈ E 00 of minimal weight and such that
(V 0 ∪ {v }, E 0 {e} is acyclic;
V 0 := V 0 ∪ {v }; E 0 := E 0 ∪ {e};
end for

Let us look at the same example

Trees

The different steps of the algorithm are

The graph (V , E 0 ) is a minimal spanning tree with n − 1 edges

